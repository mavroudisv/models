name: Deploy static content to Pages
on:
  schedule:
    - cron: '0 0 * * *'  # Once a day at midnight
  push:
    branches: ["main"]  # Runs on pushes to main
  workflow_dispatch:  # Manual trigger option
permissions:
  contents: write
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Page Repo
        uses: actions/checkout@v4
      
      - name: Clone script repo (private)
        run: |
          git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/mavroudisv/stampr_ai-collector.git
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install requirements (if any)
        run: |
          if [ -f stampr_ai-collector/requirements.txt ]; then
            pip install -r stampr_ai-collector/requirements.txt
          fi
          cd stampr_ai-collector
          pip install -e .
          cd ..
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Ensure output directory exists
        run: |
          mkdir -p signatures/gpt-4o-2024-05-13
      
      - name: Run data collection script
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          cd stampr_ai-collector
          python -m stampr_ai_collector.cli --model gpt-4o-2024-05-13 --output-dir ../signatures/gpt-4o-2024-05-13 --config configs/config_gpt-4o-2024-05-13.yaml
      
      - name: Generate signatures.json index
        run: |
          cat > generate_index.py << 'EOL'
import os
import json
import glob
import re
from datetime import datetime
from collections import defaultdict

# Find all model directories
model_dirs = glob.glob('signatures/*')
all_signatures = {}

for model_dir in sorted(model_dirs):
    model_name = os.path.basename(model_dir)
    signature_files = glob.glob(f'{model_dir}/*.json')
    
    if signature_files:
        # Sort by date in filename (most recent first)
        def get_date_from_filename(filename):
            match = re.search(r'_(\d{4}-\d{2}-\d{2})\.json$', filename)
            if match:
                return match.group(1)
            return '0000-00-00'
        
        # Sort all files by date
        sorted_files = sorted(signature_files, key=get_date_from_filename, reverse=True)
        
        # Create data for this model
        model_data = []
        for file_path in sorted_files:
            file_name = os.path.basename(file_path)
            date_match = re.search(r'_(\d{4}-\d{2}-\d{2})\.json$', file_name)
            file_date = date_match.group(1) if date_match else "Unknown"
            
            hash_match = re.search(r'^([^_]+)_', file_name)
            file_hash = hash_match.group(1) if hash_match else "Unknown"
            
            # Try to get full hash from file
            try:
                with open(file_path, 'r') as f:
                    data = json.load(f)
                file_full_hash = data.get('metadata', {}).get('distribution_hash', file_hash)
            except:
                file_full_hash = file_hash
            
            # Add to model data
            model_data.append({
                'file': file_path,
                'date': file_date,
                'hash': file_hash,
                'full_hash': file_full_hash
            })
        
        # Add to all signatures
        all_signatures[model_name] = model_data

# Update the last_updated timestamp
metadata = {
    'last_updated': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
}

# Write to data.json
with open('signatures.json', 'w') as f:
    json.dump({
        'metadata': metadata,
        'models': all_signatures
    }, f, indent=2)
EOL
          
          # Run the update script
          python generate_index.py
      
      - name: Commit and push new signatures
        run: |
          if [[ -n $(git status --porcelain signatures/ signatures.json) ]]; then
            git add signatures/ signatures.json
            git commit -m "Add new signature data [automated]"
            git push
          else
            echo "No new signature files to commit"
          fi
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
